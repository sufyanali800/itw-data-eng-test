{
	"name": "earthquakes_business",
	"properties": {
		"description": "It will extract dimension and fact tables and do business aggregations.\n\n\n",
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "demo",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 11,
			"runAsWorkspaceSystemIdentity": true,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "11",
				"spark.dynamicAllocation.maxExecutors": "11",
				"spark.autotune.trackingId": "0a5c5175-20fc-4684-8a6a-603517186bfb"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e864c2c1-8ece-4d08-9e0e-b918af4697ec/resourceGroups/earthquake-demo/providers/Microsoft.Synapse/workspaces/earthquakes-demo-pipeline/bigDataPools/demo",
				"name": "demo",
				"type": "Spark",
				"endpoint": "https://earthquakes-demo-pipeline.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/demo",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 10
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"delta_table_path = \"/silver/earthquakes\"\r\n",
					"\r\n",
					"df_source= spark.read.format(\"delta\").load(delta_table_path)\r\n",
					"\r\n",
					"display(df_source)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# extracting calander dim\r\n",
					"from pyspark.sql.functions import year, month, dayofmonth, quarter, monotonically_increasing_id\r\n",
					"\r\n",
					"df_date = df_source.select('time').distinct()\r\n",
					"df_date = df_date.select(year(\"time\").alias('year'),month(\"time\").alias('month'),dayofmonth(\"time\").alias('day'),quarter(\"time\").alias('quarter'))\r\n",
					"df_date = df_date.withColumn(\"calander_key\", monotonically_increasing_id())\r\n",
					"\r\n",
					"delta_table_path = \"/gold/calander\"\r\n",
					"df_date.mode.write.format(\"delta\").save(delta_table_path)\r\n",
					"\r\n",
					"#display(df_date)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# extracting status dim\r\n",
					"\r\n",
					"df_status = df_source.select('status').distinct()\r\n",
					"df_status = df_status.withColumn(\"status_key\", monotonically_increasing_id())\r\n",
					"\r\n",
					"delta_table_path = \"/gold/status\"\r\n",
					"df_status.write.format(\"delta\").save(delta_table_path)\r\n",
					"\r\n",
					"display(df_status)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# extracting magtype dim\r\n",
					"\r\n",
					"df_mag_type = df_source.select('magtype').distinct()\r\n",
					"df_mag_type = df_mag_type.withColumn(\"mag_type_key\", monotonically_increasing_id())\r\n",
					"\r\n",
					"delta_table_path = \"/gold/magtype\"\r\n",
					"df_mag_type.write.format(\"delta\").save(delta_table_path)\r\n",
					"\r\n",
					"display(df_mag_type)"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# extracting type dim\r\n",
					"\r\n",
					"df_type = df_source.select('type').distinct()\r\n",
					"df_type = df_type.withColumn(\"type_key\", monotonically_increasing_id())\r\n",
					"\r\n",
					"delta_table_path = \"/gold/type\"\r\n",
					"df_type.write.mode(\"overwrite\").option(\"mergeSchema\", \"true\").format(\"delta\").save(delta_table_path)\r\n",
					"\r\n",
					"display(df_type)"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# extracting place dim\r\n",
					"\r\n",
					"df_place = df_source.select('place').distinct()\r\n",
					"df_place = df_place.withColumn(\"place_key\", monotonically_increasing_id())\r\n",
					"\r\n",
					"delta_table_path = \"/gold/place\"\r\n",
					"df_place.write.mode(\"overwrite\").format(\"delta\").option(\"mergeSchema\", \"true\").save(delta_table_path)\r\n",
					"\r\n",
					"display(df_place)"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df_source)"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# extracting fact earthquacke\r\n",
					"\r\n",
					"df_earthquake = df_source.select()\r\n",
					"\r\n",
					"\r\n",
					"display(df_earthquake)"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_place = df_place.withColumn(\"place_key\", monotonically_increasing_id())\r\n",
					"\r\n",
					"delta_table_path = \"/gold/place\"\r\n",
					"df_place.write.format(\"delta\").option(\"mergeSchema\", \"true\").save(delta_table_path)"
				],
				"execution_count": null
			}
		]
	}
}